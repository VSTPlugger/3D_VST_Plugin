# This .cfg file is used to generate the JOAL interface.
Include joal-common.cfg

Style InterfaceAndImpl
JavaClass ALExt
ImplPackage jogamp.openal
ImplJavaClass ALExtAbstractImpl
AccessControl ALExtAbstractImpl PUBLIC_ABSTRACT
Extends ALExt ALExtConstants

ExtendedIntfAndImplSymbolsIgnore ../build-temp/gensrc/classes/com/jogamp/openal/AL.java
ExtendedIntfAndImplSymbolsIgnore ../build-temp/gensrc/classes/com/jogamp/openal/ALConstants.java
ExtendedIntfAndImplSymbolsIgnore ../build-temp/gensrc/classes/com/jogamp/openal/ALC.java
ExtendedIntfAndImplSymbolsIgnore ../build-temp/gensrc/classes/com/jogamp/openal/ALCConstants.java

EmitProcAddressTable true
ProcAddressTableClassName ALExtProcAddressTable
GetProcAddressTableExpr alExtProcAddressTable
ProcAddressNameExpr LP $UPPERCASE({0})
 
# Force all of the methods to be emitted using dynamic linking so we
# don't need to link against any emulation library on the desktop or
# depend on the presence of an import library for a particular device
ForceProcAddressGen __ALL__

# Also force the calling conventions of the locally generated function
# pointer typedefs for these routines to AL_APIENTRY
LocalProcAddressCallingConvention __ALL__ AL_APIENTRY

Import java.io.UnsupportedEncodingException
Import java.util.*
Import com.jogamp.openal.*
Import jogamp.openal.*
Import java.security.AccessController
Import java.security.PrivilegedAction

# Factor out the OpenAL constants into their own interface
Ignore ^AL_.+
Ignore ^ALC_.+

IncludeAs CustomJavaCode ALExtAbstractImpl joal-alextabstract-CustomJavaCode.java
ManualStaticInitCall ALExtAbstractImpl

# These routines use or return strings
ArgumentIsString alcLoopbackOpenDeviceSOFT 0

# Provide #includes to native code
CustomCCode #include "alext.h"

# Indicate that the direct buffers for ALCcontext, etc. are "opaque",
# i.e., the user shouldn't be poking around in them
ReturnValueCapacity alcLoopbackOpenDeviceSOFT 0

IncludeAs CustomCCode joal-common-CustomCCode.c

