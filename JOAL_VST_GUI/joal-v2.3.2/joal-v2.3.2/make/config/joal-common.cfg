Package com.jogamp.openal

# Specify output directories
HierarchicalNativeOutput false
JavaOutputDir gensrc/classes
NativeOutputDir gensrc/native/joal

# Raise ALException instead of RuntimeException in glue code
RuntimeExceptionType ALException

# We also have to hack its return type for now because we can't make
# just that void* opaque
Opaque long ALproc
Opaque long ALCproc

# ALCdevice and ALCcontext are 'typesafe' opaque instances,
# i.e., using Java class instance without allowing the user poking around in them.
#Opaque long ALCdevice*
#Opaque long ALCcontext*
ReturnValueCapacity alcGetContextsDevice 0
ReturnValueCapacity alcOpenDevice 0
ReturnValueCapacity alcCaptureOpenDevice 0
ReturnValueCapacity alcLoopbackOpenDeviceSOFT 0
ReturnValueCapacity alcCreateContext 0
ReturnValueCapacity alcGetCurrentContext 0
ReturnValueCapacity alcGetThreadContext 0
#ReturnValueCapacity alcGetCurrentDevice 0 ?? does not exist ??

# Mappings for data types
Opaque boolean ALboolean
Opaque boolean ALCboolean

# This routine is not exposed in the public API
AccessControl alGetProcAddress PACKAGE_PRIVATE

# This routine is ignored. The analogous routine alGetProcAddress is
# broken at least up through OpenAL 1.1 so there is no point in trying
# to use this routine to look up the ALC function pointers.
#Ignore alcGetProcAddress
AccessControl alcGetProcAddress PACKAGE_PRIVATE

# This routine doesn't seem to exist
Ignore alHint

# These routines use or return strings
ReturnsString alGetString
ArgumentIsString alIsExtensionPresent 0
ArgumentIsString alGetEnumValue 0
ArgumentIsString alGetProcAddress 0

ReturnsString alcGetString
ArgumentIsString alcOpenDevice 0
ArgumentIsString alcIsExtensionPresent 1
ArgumentIsString alcGetProcAddress 1
ArgumentIsString alcGetEnumValue 1
ArgumentIsString alcCaptureOpenDevice 0
ArgumentIsString alcLoopbackOpenDeviceSOFT 0

## Specify the return length of this function with our own custom strlen
##ReturnValueCapacity alcGetStringImpl strlen_alc(_device_ptr, {1}, _res)

